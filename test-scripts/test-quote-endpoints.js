// test-quote-endpoints.js - Test script for Quote_Analytics, Quote_Items, and Quote_Sessions endpoints

const axios = require('axios');

// Base URL for the API
const BASE_URL = 'http://localhost:3002'; // Change if your server runs on a different port

// Test data for Quote_Analytics
const testQuoteAnalytics = {
    SessionID: "test-session-" + Date.now(),
    QuoteID: "test-quote-" + Date.now(),
    EventType: "page_view",
    StyleNumber: "PC61",
    Color: "Black",
    PrintLocation: "FF",
    UserAgent: "Test Script",
    IPAddress: "127.0.0.1"
    // AnalyticsID will be auto-generated by the server
};

// Test data for Quote_Items
const testQuoteItem = {
    QuoteID: "test-quote-" + Date.now(),
    LineNumber: 1,
    StyleNumber: "PC61",
    ProductName: "Essential Tee",
    Color: "Black",
    ColorCode: "BLACK",
    EmbellishmentType: "dtg",
    PrintLocation: "FF",
    PrintLocationName: "Full Front",
    Quantity: 48,
    HasLTM: "No",
    BaseUnitPrice: 15.99,
    LTMPerUnit: 0,
    FinalUnitPrice: 15.99,
    LineTotal: 767.52,
    SizeBreakdown: JSON.stringify({"S":12,"M":12,"L":12,"XL":12}),
    PricingTier: "48-71",
    ImageURL: "https://example.com/pc61-black.jpg"
    // ItemID will be auto-generated by the server
};

// Test data for Quote_Sessions
const testQuoteSession = {
    QuoteID: "test-quote-" + Date.now(),
    SessionID: "test-session-" + Date.now(),
    CustomerEmail: "test@example.com",
    CustomerName: "Test User",
    CompanyName: "Test Company",
    Phone: "555-1234",
    TotalQuantity: 48,
    SubtotalAmount: 767.52,
    LTMFeeTotal: 0,
    TotalAmount: 767.52,
    Status: "active",
    ExpiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now
    Notes: "Test quote for API testing"
    // CreatedAt and UpdatedAt will be set by the server
};

// Function to test POST /api/quote_analytics
async function testCreateQuoteAnalytics() {
    try {
        console.log('\n===== Testing POST /api/quote_analytics =====');
        console.log(`Creating Quote_Analytics with data: ${JSON.stringify(testQuoteAnalytics, null, 2)}`);
        const response = await axios.post(`${BASE_URL}/api/quote_analytics`, testQuoteAnalytics);
        console.log(`Status: ${response.status}`);
        console.log(`Response data: ${JSON.stringify(response.data, null, 2)}`);
        console.log('✅ POST /api/quote_analytics - Success');
        return response.data;
    } catch (error) {
        console.error('❌ POST /api/quote_analytics - Failed:', error.response ? error.response.data : error.message);
        throw error;
    }
}

// Function to test POST /api/quote_items
async function testCreateQuoteItem() {
    try {
        console.log('\n===== Testing POST /api/quote_items =====');
        console.log(`Creating Quote_Item with data: ${JSON.stringify(testQuoteItem, null, 2)}`);
        const response = await axios.post(`${BASE_URL}/api/quote_items`, testQuoteItem);
        console.log(`Status: ${response.status}`);
        console.log(`Response data: ${JSON.stringify(response.data, null, 2)}`);
        console.log('✅ POST /api/quote_items - Success');
        return response.data;
    } catch (error) {
        console.error('❌ POST /api/quote_items - Failed:', error.response ? error.response.data : error.message);
        throw error;
    }
}

// Function to test POST /api/quote_sessions
async function testCreateQuoteSession() {
    try {
        console.log('\n===== Testing POST /api/quote_sessions =====');
        console.log(`Creating Quote_Session with data: ${JSON.stringify(testQuoteSession, null, 2)}`);
        const response = await axios.post(`${BASE_URL}/api/quote_sessions`, testQuoteSession);
        console.log(`Status: ${response.status}`);
        console.log(`Response data: ${JSON.stringify(response.data, null, 2)}`);
        console.log('✅ POST /api/quote_sessions - Success');
        return response.data;
    } catch (error) {
        console.error('❌ POST /api/quote_sessions - Failed:', error.response ? error.response.data : error.message);
        throw error;
    }
}

// Function to test GET /api/quote_analytics
async function testGetQuoteAnalytics(id) {
    try {
        console.log(`\n===== Testing GET /api/quote_analytics/${id} =====`);
        const response = await axios.get(`${BASE_URL}/api/quote_analytics/${id}`);
        console.log(`Status: ${response.status}`);
        console.log(`Response data: ${JSON.stringify(response.data, null, 2)}`);
        console.log('✅ GET /api/quote_analytics/:id - Success');
        return response.data;
    } catch (error) {
        console.error(`❌ GET /api/quote_analytics/${id} - Failed:`, error.response ? error.response.data : error.message);
        throw error;
    }
}

// Function to test GET /api/quote_items
async function testGetQuoteItem(id) {
    try {
        console.log(`\n===== Testing GET /api/quote_items/${id} =====`);
        const response = await axios.get(`${BASE_URL}/api/quote_items/${id}`);
        console.log(`Status: ${response.status}`);
        console.log(`Response data: ${JSON.stringify(response.data, null, 2)}`);
        console.log('✅ GET /api/quote_items/:id - Success');
        return response.data;
    } catch (error) {
        console.error(`❌ GET /api/quote_items/${id} - Failed:`, error.response ? error.response.data : error.message);
        throw error;
    }
}

// Function to test GET /api/quote_sessions
async function testGetQuoteSession(id) {
    try {
        console.log(`\n===== Testing GET /api/quote_sessions/${id} =====`);
        const response = await axios.get(`${BASE_URL}/api/quote_sessions/${id}`);
        console.log(`Status: ${response.status}`);
        console.log(`Response data: ${JSON.stringify(response.data, null, 2)}`);
        console.log('✅ GET /api/quote_sessions/:id - Success');
        return response.data;
    } catch (error) {
        console.error(`❌ GET /api/quote_sessions/${id} - Failed:`, error.response ? error.response.data : error.message);
        throw error;
    }
}

// Main function to run all tests
async function runTests() {
    try {
        console.log('Starting tests for Quote endpoints...');
        
        // Test Quote_Analytics
        const analyticsResult = await testCreateQuoteAnalytics();
        if (analyticsResult && analyticsResult.Result && analyticsResult.Result.length > 0) {
            const analyticsId = analyticsResult.Result[0].PK_ID;
            await testGetQuoteAnalytics(analyticsId);
        }
        
        // Test Quote_Items
        const itemResult = await testCreateQuoteItem();
        if (itemResult && itemResult.Result && itemResult.Result.length > 0) {
            const itemId = itemResult.Result[0].PK_ID;
            await testGetQuoteItem(itemId);
        }
        
        // Test Quote_Sessions
        const sessionResult = await testCreateQuoteSession();
        if (sessionResult && sessionResult.Result && sessionResult.Result.length > 0) {
            const sessionId = sessionResult.Result[0].PK_ID;
            await testGetQuoteSession(sessionId);
        }
        
        console.log('\n===== All tests completed =====');
    } catch (error) {
        console.error('Error running tests:', error);
    }
}

// Run the tests
runTests();