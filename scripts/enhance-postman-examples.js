#!/usr/bin/env node

/**
 * Enhance Postman Collection with Working Examples
 *
 * Adds:
 * - Quick Reference documentation endpoint
 * - Pre-filled working examples for all ManageOrders endpoints
 * - Detailed descriptions with date formats and use cases
 * - Example saved responses
 */

const fs = require('fs');
const path = require('path');

const collectionPath = path.join(__dirname, '../docs/NWCA-API.postman_collection.json');

console.log('üöÄ Enhancing Postman collection with working examples...\n');

// Read the collection
const collection = JSON.parse(fs.readFileSync(collectionPath, 'utf8'));

// Find ManageOrders API folder
const manageOrdersFolder = collection.item.find(i => i.name === 'üìä ManageOrders API');

if (!manageOrdersFolder) {
  console.error('‚ùå ManageOrders API folder not found!');
  process.exit(1);
}

// ============================================================================
// 1. CREATE QUICK REFERENCE DOCUMENTATION ENDPOINT
// ============================================================================

const quickReferenceEndpoint = {
  "name": "üìñ API Quick Reference",
  "request": {
    "method": "GET",
    "header": [],
    "url": {
      "raw": "",
      "host": [""]
    },
    "description": `# ManageOrders API Quick Reference

## üìÖ Date Formats

All date parameters accept these formats:
- **ISO Date:** \`2025-10-01\` (recommended)
- **ISO DateTime:** \`2025-10-01T00:00:00\`
- **ISO with Timezone:** \`2025-10-01T00:00:00-07:00\`

### Example Date Ranges:
\`\`\`
Today's orders:
date_Ordered_start=2025-10-26&date_Ordered_end=2025-10-26

Last 7 days:
date_Ordered_start=2025-10-19&date_Ordered_end=2025-10-26

Current month:
date_Ordered_start=2025-10-01&date_Ordered_end=2025-10-31
\`\`\`

---

## üîç Available Date Fields

### Orders Endpoint
- \`date_Ordered\` - When customer placed order
- \`date_Invoiced\` - When order was invoiced
- \`date_Shipped\` - When order was shipped
- \`date_Produced\` - When order was produced
- \`date_RequestedToShip\` - Requested ship date

### Payments Endpoint
- \`date_PaymentApplied\` - When payment was applied

### Tracking Endpoint
- \`date_Creation\` - When tracking was created
- \`date_Imported\` - When tracking was imported

**Usage:** Add \`_start\` and \`_end\` suffix for ranges
- Example: \`date_Invoiced_start=2025-10-01&date_Invoiced_end=2025-10-31\`

---

## üéØ Common Query Patterns

### Get Recent Orders
\`\`\`
GET /api/manageorders/orders?date_Invoiced_start=2025-10-01&date_Invoiced_end=2025-10-26
\`\`\`

### Check Product Inventory
\`\`\`
GET /api/manageorders/inventorylevels?PartNumber=PC54
\`\`\`

### Get Order Details
\`\`\`
GET /api/manageorders/orders/138145
\`\`\`

### Get Order Line Items
\`\`\`
GET /api/manageorders/lineitems/138145
\`\`\`

### Get Order Tracking
\`\`\`
GET /api/manageorders/tracking/138152
\`\`\`

### Force Cache Refresh
\`\`\`
Add ?refresh=true to any endpoint
Example: /api/manageorders/customers?refresh=true
\`\`\`

---

## üì¶ Inventory Filters

\`GET /api/manageorders/inventorylevels\` supports:
- \`PartNumber\` - Product part number (e.g., "PC54")
- \`Color\` - Specific color name
- \`ColorRange\` - Color range filter
- \`SKU\` - Product SKU
- \`VendorName\` - Vendor (e.g., "SANMAR")
- \`date_Modification_start/end\` - Recently updated inventory

**Example:** \`?PartNumber=PC54&VendorName=SANMAR\`

---

## ‚ö° Cache Durations

| Endpoint | Cache | Why |
|----------|-------|-----|
| Inventory | 5 min | Real-time stock critical |
| Tracking | 15 min | Updates during shipping |
| Orders (queries) | 1 hour | Intraday changes |
| Orders (by ID) | 24 hours | Historical data |
| Line Items | 24 hours | Historical data |
| Payments | 1 hour (queries), 24 hours (by ID) | Same as orders |
| Customers | 24 hours | Changes slowly |

---

## üìù Response Format

All endpoints return:
\`\`\`json
{
  "result": [...],     // Array of results (empty array if not found)
  "count": 5,          // Number of results
  "cached": true       // Whether response was cached
}
\`\`\`

**Not Found:** Returns empty array with 200 status (not 404)
\`\`\`json
{
  "result": [],
  "count": 0,
  "cached": false
}
\`\`\`

---

## üîë Real Test Data

**Order Numbers:**
- 138145 - Order with line items
- 138146 - Order with payment
- 138152 - Order with tracking

**Part Numbers:**
- PC54 - Port & Company Core Cotton Tee
- PC61 - Port & Company Essential Tee

**Date Range:**
- 2025-10-01 to 2025-10-26 (Current month)

---

## üé® Size Fields

Line items and inventory use Size01-06:
- Size01 = XS
- Size02 = S
- Size03 = M
- Size04 = L
- Size05 = XL
- Size06 = 2XL

(Note: Actual size meanings may vary by product)

---

## üöÄ Getting Started

1. **Check Inventory:** Start with \`/api/manageorders/inventorylevels?PartNumber=PC54\`
2. **Get Recent Orders:** Try \`/api/manageorders/orders?date_Invoiced_start=2025-10-01&date_Invoiced_end=2025-10-26\`
3. **Look Up Order:** Use a real order number like \`/api/manageorders/orders/138145\`
4. **Get Line Items:** \`/api/manageorders/lineitems/138145\`
5. **Check Tracking:** \`/api/manageorders/tracking/138152\`

**All examples in this collection use real data and will work immediately!**`
  },
  "response": []
};

// ============================================================================
// 2. ENHANCE EACH ENDPOINT WITH EXAMPLES
// ============================================================================

const endpointEnhancements = [
  {
    name: 'Get Customers (Last 60 Days)',
    params: [
      { key: 'refresh', value: 'false', description: 'Force cache refresh (true/false)' }
    ],
    description: `**Get Unique Customers from Last 60 Days of Orders**

Fetches and deduplicates customers based on orders placed in the last 60 days.

**Features:**
- ‚úÖ Automatic deduplication by customer ID
- ‚úÖ Phone number cleaning (removes 'W ' and 'C ' prefixes)
- ‚úÖ Sorted alphabetically by customer name
- ‚úÖ 24-hour cache
- ‚úÖ Rate limited (30 requests/minute)

**Query Parameters:**
- \`refresh\` (boolean, optional): Force cache refresh. Default: false

**Example Usage:**
\`\`\`
# Get customers (uses cache)
GET /api/manageorders/customers

# Force refresh
GET /api/manageorders/customers?refresh=true
\`\`\`

**Response:**
\`\`\`json
{
  "customers": [
    {
      "id_Customer": 12279,
      "CustomerName": "Washington State Housing Finance Commission",
      "ContactFirstName": "Tera",
      "ContactLastName": "Ahlborn",
      "ContactEmail": "Tera.Ahlborn@wshfc.org",
      "ContactPhone": "206-287-4470",
      "CustomerServiceRep": "Nika Lao",
      "lastOrderDate": "2025-10-01T00:00:00.000Z"
    }
  ],
  "cached": true,
  "cacheDate": "2025-10-26",
  "count": 389
}
\`\`\`

**Performance:**
- Initial load: ~2.3s (912 orders ‚Üí 389 customers)
- Cached response: <100ms`
  },
  {
    name: 'Get Cache Info',
    params: [],
    description: `**Debug Endpoint - Cache Status**

Returns detailed information about the customer cache state.

**Use Cases:**
- Check if cache is working
- See when cache was last refreshed
- Determine when cache will expire
- Debug caching issues

**Response:**
\`\`\`json
{
  "cacheExists": true,
  "cacheValid": true,
  "cacheTimestamp": "2025-10-26T15:50:18.000Z",
  "cacheAgeMs": 300000,
  "cacheAgeMinutes": 5,
  "cacheDurationMs": 86400000,
  "customerCount": 389
}
\`\`\``
  },
  {
    name: 'Get Orders (by Date Range)',
    params: [
      { key: 'date_Invoiced_start', value: '2025-10-01', description: 'Start date (YYYY-MM-DD)' },
      { key: 'date_Invoiced_end', value: '2025-10-26', description: 'End date (YYYY-MM-DD)' },
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Query Orders by Date Range** ‚è∞ Cache: 1 hour

Fetch orders using multiple date filter options.

**Available Date Fields:**
- \`date_Ordered\` - When customer placed order
- \`date_Invoiced\` - When order was invoiced ‚≠ê (most common)
- \`date_Shipped\` - When order was shipped
- \`date_Produced\` - When order was produced
- \`date_RequestedToShip\` - Requested ship date

**Date Format:** \`YYYY-MM-DD\` or \`YYYY-MM-DDTHH:MM:SS\`

**Query Parameters:**
- \`date_[Field]_start\` - Start of date range
- \`date_[Field]_end\` - End of date range
- \`id_Customer\` - Filter by specific customer ID
- \`refresh\` (boolean) - Force cache refresh

**Example Queries:**
\`\`\`
# Get orders invoiced in October
?date_Invoiced_start=2025-10-01&date_Invoiced_end=2025-10-31

# Get orders shipped last week
?date_Shipped_start=2025-10-19&date_Shipped_end=2025-10-26

# Get orders for specific customer
?date_Ordered_start=2025-10-01&date_Ordered_end=2025-10-26&id_Customer=12279
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Order": 138145,
      "id_Customer": 12279,
      "CustomerName": "ABC Company",
      "date_Ordered": "2025-10-15T00:00:00.000Z",
      "date_Invoiced": "2025-10-16T00:00:00.000Z",
      "cur_TotalInvoice": 1250.00,
      "sts_Shipped": true
      // ... more fields
    }
  ],
  "count": 24,
  "cached": false
}
\`\`\`

**Performance:** ~2 seconds for 24 orders, <100ms when cached`
  },
  {
    name: 'Get Order (by Order Number)',
    urlParams: { order_no: '138145' },
    params: [
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Get Specific Order Details** ‚è∞ Cache: 24 hours

Fetch complete information for a single order by order number.

**URL Parameter:**
- \`:order_no\` - ManageOrders order number (e.g., 138145)

**Use Cases:**
- Order status page
- "Track My Order" feature
- Customer self-service portal
- Order lookup

**Example:**
\`\`\`
GET /api/manageorders/orders/138145
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Order": 138145,
      "id_Customer": 12279,
      "CustomerName": "ABC Company",
      "ContactEmail": "customer@example.com",
      "date_Ordered": "2025-10-15T00:00:00.000Z",
      "date_Invoiced": "2025-10-16T00:00:00.000Z",
      "date_Shipped": "2025-10-18T00:00:00.000Z",
      "cur_TotalInvoice": 1250.00,
      "cur_Balance": 0.00,
      "sts_Shipped": true,
      "CustomerServiceRep": "Nika Lao"
      // ... more fields
    }
  ],
  "count": 1,
  "cached": true
}
\`\`\`

**Note:** Returns array with single order, or empty array if not found

**Performance:** <1 second, <100ms when cached`
  },
  {
    name: 'Get Order Number (by External ID)',
    urlParams: { ext_order_id: 'SHOP-12345' },
    params: [
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Map External Order ID to ManageOrders Order Number** ‚è∞ Cache: 24 hours

Converts external system order IDs (Shopify, WooCommerce, etc.) to ManageOrders order numbers.

**URL Parameter:**
- \`:ext_order_id\` - External order ID from your system

**Use Cases:**
- Integration with e-commerce platforms
- Order synchronization
- Cross-system order lookup
- API integrations

**Example:**
\`\`\`
GET /api/manageorders/getorderno/SHOP-12345
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Order": 138145,
      "ext_OrderId": "SHOP-12345"
    }
  ],
  "count": 1,
  "cached": true
}
\`\`\`

**Workflow:**
1. Customer places order on your webstore (gets external ID)
2. Order syncs to ManageOrders (gets ManageOrders order number)
3. Use this endpoint to map external ID ‚Üí ManageOrders order number
4. Use that number with other endpoints

**Note:** Returns empty array if external ID not found`
  },
  {
    name: 'Get Line Items (for Order)',
    urlParams: { order_no: '138145' },
    params: [
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Get Order Line Items (Products, Quantities, Pricing)** ‚è∞ Cache: 24 hours

Fetch detailed line items for a specific order, including products, sizes, and pricing.

**URL Parameter:**
- \`:order_no\` - ManageOrders order number

**Use Cases:**
- Display order contents
- Show product breakdown
- Size distribution
- Pricing details
- Custom fields (decoration info)

**Example:**
\`\`\`
GET /api/manageorders/lineitems/138145
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_OrderLine": 234567,
      "id_Order": 138145,
      "PartNumber": "PC54",
      "PartDescription": "Port & Company Core Cotton Tee",
      "PartColor": "Jet Black",
      "Size01": 0,   // XS quantity
      "Size02": 2,   // S quantity
      "Size03": 5,   // M quantity
      "Size04": 8,   // L quantity
      "Size05": 3,   // XL quantity
      "Size06": 0,   // 2XL quantity
      "LineQuantity": 18,
      "LineUnitPrice": 12.50,
      "LinePrice": 225.00,
      "Custom01": "Left Chest Logo",
      "Custom02": "3x3 inches",
      "Custom03": "Thread color: White"
      // ... more fields
    }
  ],
  "count": 2,
  "cached": true
}
\`\`\`

**Size Fields:**
- Size01 through Size06 represent different sizes (typically XS through 2XL)
- Actual size labels may vary by product
- Total quantity = Sum of all size fields

**Performance:** <1 second, <100ms when cached`
  },
  {
    name: 'Get Payments (by Date Range)',
    params: [
      { key: 'date_PaymentApplied_start', value: '2025-10-01', description: 'Start date (YYYY-MM-DD)' },
      { key: 'date_PaymentApplied_end', value: '2025-10-26', description: 'End date (YYYY-MM-DD)' },
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Query Payments by Date Range** ‚è∞ Cache: 1 hour

Fetch payment transactions for a date range.

**Query Parameters:**
- \`date_PaymentApplied_start\` - Start date (YYYY-MM-DD)
- \`date_PaymentApplied_end\` - End date (YYYY-MM-DD)
- \`refresh\` (boolean) - Force cache refresh

**Use Cases:**
- Payment reports
- Cash flow analysis
- Accounting reconciliation
- Payment history

**Example:**
\`\`\`
# Get October payments
GET /api/manageorders/payments?date_PaymentApplied_start=2025-10-01&date_PaymentApplied_end=2025-10-31
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Payment": 56789,
      "id_Order": 138146,
      "PaymentAmount": 500.00,
      "PaymentMethod": "Credit Card",
      "date_PaymentApplied": "2025-10-16T14:30:00.000Z",
      "PaymentSource": "Web"
      // ... more fields
    }
  ],
  "count": 15,
  "cached": false
}
\`\`\`

**Payment Sources:**
- "Web" - Online payments
- "OnSite" - Payments entered in OnSite system`
  },
  {
    name: 'Get Payments (for Order)',
    urlParams: { order_no: '138146' },
    params: [
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Get Payments for Specific Order** ‚è∞ Cache: 24 hours

Fetch all payment transactions for a single order.

**URL Parameter:**
- \`:order_no\` - ManageOrders order number

**Use Cases:**
- Order payment history
- Payment verification
- Balance calculation
- Invoice reconciliation

**Example:**
\`\`\`
GET /api/manageorders/payments/138146
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Payment": 56789,
      "id_Order": 138146,
      "PaymentAmount": 500.00,
      "PaymentMethod": "Credit Card",
      "date_PaymentApplied": "2025-10-16T14:30:00.000Z",
      "PaymentSource": "Web",
      "PaymentNotes": "Stripe payment"
    }
  ],
  "count": 1,
  "cached": true
}
\`\`\`

**Note:** An order may have multiple payments if paid in installments

**Calculate Balance:**
\`\`\`javascript
const totalPaid = payments.reduce((sum, p) => sum + p.PaymentAmount, 0);
const balance = order.cur_TotalInvoice - totalPaid;
\`\`\``
  },
  {
    name: 'Get Tracking (by Date Range)',
    params: [
      { key: 'date_Creation_start', value: '2025-10-01', description: 'Start date (YYYY-MM-DD)' },
      { key: 'date_Creation_end', value: '2025-10-26', description: 'End date (YYYY-MM-DD)' },
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Query Tracking Information by Date Range** ‚è∞ Cache: 15 minutes

Fetch shipment tracking for a date range.

**Available Date Fields:**
- \`date_Creation\` - When tracking was created
- \`date_Imported\` - When tracking was imported from carrier

**Query Parameters:**
- \`date_[Field]_start\` - Start date (YYYY-MM-DD)
- \`date_[Field]_end\` - End date (YYYY-MM-DD)
- \`refresh\` (boolean) - Force cache refresh

**Use Cases:**
- Recent shipments report
- Shipping activity dashboard
- Carrier performance analysis

**Example:**
\`\`\`
# Get tracking created in last week
GET /api/manageorders/tracking?date_Creation_start=2025-10-19&date_Creation_end=2025-10-26
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Tracking": 12345,
      "id_Order": 138152,
      "TrackingNumber": "1Z999AA10123456784",
      "Type": "UPS",
      "date_Creation": "2025-10-18T10:00:00.000Z",
      "AddressCity": "Seattle",
      "AddressState": "WA",
      "Weight": 5.2,
      "FreightCost": 12.50
    }
  ],
  "count": 8,
  "cached": false
}
\`\`\`

**Cache:** 15 minutes (updates frequently during shipping day)`
  },
  {
    name: 'Get Tracking (for Order)',
    urlParams: { order_no: '138152' },
    params: [
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Get Tracking for Specific Order** ‚è∞ Cache: 15 minutes

Fetch shipment tracking information for a single order.

**URL Parameter:**
- \`:order_no\` - ManageOrders order number

**Use Cases:**
- "Track My Order" page
- Shipping confirmation emails
- Customer self-service
- Order status updates

**Example:**
\`\`\`
GET /api/manageorders/tracking/138152
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Tracking": 12345,
      "id_Order": 138152,
      "TrackingNumber": "1Z999AA10123456784",
      "Type": "UPS",
      "date_Creation": "2025-10-18T10:00:00.000Z",
      "AddressName": "John Smith",
      "AddressCompany": "ABC Corp",
      "AddressLine1": "123 Main St",
      "AddressLine2": "Suite 100",
      "AddressCity": "Seattle",
      "AddressState": "WA",
      "AddressZip": "98101",
      "Weight": 5.2,
      "FreightCost": 12.50
    }
  ],
  "count": 1,
  "cached": false
}
\`\`\`

**Note:** An order may have multiple tracking numbers if shipped in multiple packages

**Common Carriers:**
- "UPS" - UPS tracking
- "FEDEX" - FedEx tracking
- "USPS" - USPS tracking

**Build Tracking URL:**
\`\`\`javascript
const trackingUrls = {
  'UPS': (num) => \`https://wwwapps.ups.com/tracking/tracking.cgi?tracknum=\${num}\`,
  'FEDEX': (num) => \`https://www.fedex.com/fedextrack/?tracknumbers=\${num}\`,
  'USPS': (num) => \`https://tools.usps.com/go/TrackConfirmAction?tLabels=\${num}\`
};
\`\`\`

**Cache:** 15 minutes (frequent updates during shipping)`
  },
  {
    name: 'Get Inventory Levels',
    params: [
      { key: 'PartNumber', value: 'PC54', description: 'Product part number (e.g., PC54, PC61)' },
      { key: 'VendorName', value: '', description: 'Vendor name (e.g., SANMAR)', disabled: true },
      { key: 'Color', value: '', description: 'Specific color name', disabled: true },
      { key: 'refresh', value: '', description: 'Force cache refresh (true/false)', disabled: true }
    ],
    description: `**Get Real-Time Inventory Levels** ‚è∞ Cache: 5 minutes ‚≠ê CRITICAL FOR WEBSTORE

Fetch current inventory quantities with Size01-06 breakdown.

**Available Filters:**
- \`PartNumber\` - Product part number (e.g., "PC54")
- \`Color\` - Specific color name
- \`ColorRange\` - Color range filter
- \`SKU\` - Product SKU
- \`VendorName\` - Vendor (e.g., "SANMAR")
- \`date_Modification_start/end\` - Recently updated inventory
- \`refresh\` (boolean) - Force cache refresh

**Use Cases:** üåü
- Show "In Stock" / "Out of Stock" on product pages
- Real-time availability before adding to cart
- Prevent overselling
- Display size availability matrix
- Inventory reports

**Example Queries:**
\`\`\`
# Check stock for specific product
GET /api/manageorders/inventorylevels?PartNumber=PC54

# Get all SANMAR products
GET /api/manageorders/inventorylevels?VendorName=SANMAR

# Filter by color
GET /api/manageorders/inventorylevels?PartNumber=PC54&Color=Jet Black
\`\`\`

**Response:**
\`\`\`json
{
  "result": [
    {
      "id_Part": 12345,
      "PartNumber": "PC54",
      "PartDescription": "Port & Company Core Cotton Tee",
      "Color": "Jet Black",
      "SKU": "PC54-BLK",
      "VendorName": "SANMAR",
      "Size01": 4,    // XS quantity
      "Size02": 10,   // S quantity
      "Size03": 11,   // M quantity
      "Size04": 79,   // L quantity
      "Size05": 0,    // XL quantity (OUT OF STOCK)
      "Size06": 0,    // 2XL quantity (OUT OF STOCK)
      "date_Modification": "2025-10-26T08:30:00.000Z"
    },
    // ... more color variants
  ],
  "count": 5,
  "cached": false
}
\`\`\`

**Size Fields:**
- Size01 through Size06 represent different sizes
- Typically: XS, S, M, L, XL, 2XL
- Actual size labels may vary by product
- 0 = Out of stock for that size

**Check Stock Example:**
\`\`\`javascript
// Check if any sizes are in stock
const totalStock = item.Size01 + item.Size02 + item.Size03 +
                   item.Size04 + item.Size05 + item.Size06;

if (totalStock > 0) {
  console.log('In Stock');
} else {
  console.log('Out of Stock');
}

// Check specific size
const largeQty = item.Size04; // L size
if (largeQty >= requestedQty) {
  console.log('Size L available');
}
\`\`\`

**Performance:** ~1 second for 5 color variants, <100ms when cached

**Cache:** Only 5 minutes for near-real-time accuracy!`
  }
];

// ============================================================================
// 3. APPLY ENHANCEMENTS
// ============================================================================

console.log('üìù Applying enhancements to endpoints...\n');

// Add Quick Reference at the beginning (after Sign In)
const signInIndex = manageOrdersFolder.item.findIndex(e => e.name === 'Sign In (Get Token)');
if (signInIndex !== -1) {
  // Check if Quick Reference already exists
  const qrIndex = manageOrdersFolder.item.findIndex(e => e.name === 'üìñ API Quick Reference');
  if (qrIndex === -1) {
    manageOrdersFolder.item.splice(signInIndex + 1, 0, quickReferenceEndpoint);
    console.log('  ‚úÖ Added Quick Reference documentation endpoint');
  } else {
    manageOrdersFolder.item[qrIndex] = quickReferenceEndpoint;
    console.log('  üîÑ Updated existing Quick Reference documentation');
  }
}

// Apply enhancements to each endpoint
let enhancedCount = 0;

endpointEnhancements.forEach(enhancement => {
  const endpoint = manageOrdersFolder.item.find(e => e.name === enhancement.name);

  if (!endpoint) {
    console.log(`  ‚ö†Ô∏è  Endpoint not found: ${enhancement.name}`);
    return;
  }

  // Update description
  if (enhancement.description) {
    endpoint.request.description = enhancement.description;
  }

  // Update URL parameters (for :order_no, :ext_order_id, etc.)
  if (enhancement.urlParams) {
    Object.keys(enhancement.urlParams).forEach(paramName => {
      const value = enhancement.urlParams[paramName];

      // Update path variable
      if (endpoint.request.url.path) {
        endpoint.request.url.path = endpoint.request.url.path.map(segment => {
          if (segment === `:${paramName}`) {
            return value; // Replace :order_no with actual value
          }
          return segment;
        });
      }

      // Update raw URL
      if (endpoint.request.url.raw) {
        endpoint.request.url.raw = endpoint.request.url.raw.replace(
          `:${paramName}`,
          value
        );
      }

      // Add variable
      if (!endpoint.request.url.variable) {
        endpoint.request.url.variable = [];
      }

      const existingVar = endpoint.request.url.variable.find(v => v.key === paramName);
      if (existingVar) {
        existingVar.value = value;
      } else {
        endpoint.request.url.variable.push({
          key: paramName,
          value: value,
          description: `Example ${paramName}`
        });
      }
    });
  }

  // Update query parameters
  if (enhancement.params) {
    if (!endpoint.request.url.query) {
      endpoint.request.url.query = [];
    }

    enhancement.params.forEach(param => {
      const existingParam = endpoint.request.url.query.find(p => p.key === param.key);

      if (existingParam) {
        // Update existing parameter
        existingParam.value = param.value;
        existingParam.description = param.description;
        if (param.disabled !== undefined) {
          existingParam.disabled = param.disabled;
        }
      } else {
        // Add new parameter
        endpoint.request.url.query.push({
          key: param.key,
          value: param.value,
          description: param.description,
          disabled: param.disabled || false
        });
      }
    });
  }

  console.log(`  ‚úÖ Enhanced: ${enhancement.name}`);
  enhancedCount++;
});

console.log(`\n‚ú® Enhanced ${enhancedCount} endpoints with working examples and detailed descriptions`);

// ============================================================================
// 4. SAVE COLLECTION
// ============================================================================

fs.writeFileSync(collectionPath, JSON.stringify(collection, null, '\t'));

console.log('\n‚úÖ Collection enhanced successfully!');
console.log(`üìä ManageOrders API folder now has ${manageOrdersFolder.item.length} endpoints`);
console.log('\nüí° Next step: Run npm run update-postman to sync to Postman API\n');
